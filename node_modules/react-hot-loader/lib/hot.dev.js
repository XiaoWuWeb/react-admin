'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _reactUtils = require('./internal/reactUtils');

var _AppContainer = require('./AppContainer.dev');

var _AppContainer2 = _interopRequireDefault(_AppContainer);

var _reactHotLoader = require('./reactHotLoader');

var _reactHotLoader2 = _interopRequireDefault(_reactHotLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createHoc = (SourceComponent, TargetComponent) => {
  (0, _hoistNonReactStatics2.default)(TargetComponent, SourceComponent);
  TargetComponent.displayName = `HotExported${(0, _reactUtils.getComponentDisplayName)(SourceComponent)}`;
  return TargetComponent;
};

const makeHotExport = (sourceModule, getInstances) => {
  const updateInstances = () => setTimeout(() => getInstances().forEach(inst => inst.forceUpdate()));

  if (sourceModule.hot) {
    // Mark as self-accepted for Webpack
    // Update instances for Parcel
    sourceModule.hot.accept(updateInstances);

    // Webpack way
    if (sourceModule.hot.addStatusHandler) {
      if (sourceModule.hot.status() === 'idle') {
        sourceModule.hot.addStatusHandler(status => {
          if (status === 'apply') {
            updateInstances();
          }
        });
      }
    }
  }
};

const hot = sourceModule => {
  let instances = [];
  makeHotExport(sourceModule, () => instances);
  // TODO: Ensure that all exports from this file are react components.

  return WrappedComponent => {
    // register proxy for wrapped component
    _reactHotLoader2.default.register(WrappedComponent, (0, _reactUtils.getComponentDisplayName)(WrappedComponent), `RHL${sourceModule.id}`);

    return createHoc(WrappedComponent, class ExportedComponent extends _react.Component {
      componentWillMount() {
        instances.push(this);
      }

      componentWillUnmount() {
        instances = instances.filter(a => a !== this);
      }

      render() {
        return _react2.default.createElement(
          _AppContainer2.default,
          null,
          _react2.default.createElement(WrappedComponent, this.props)
        );
      }
    });
  };
};

exports.default = hot;