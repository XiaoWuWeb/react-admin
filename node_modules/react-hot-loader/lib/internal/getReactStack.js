'use strict';

exports.__esModule = true;

var _reactUtils = require('./reactUtils');

function pushState(stack, instance, element) {
  stack.type = instance.type;
  stack.tag = instance.tag;
  stack.children = [];
  stack.instance = element || (0, _reactUtils.getReactComponent)(instance) || stack;
}

// these function might be obsolete
/* eslint-disable no-underscore-dangle */

function traverseRenderedChildren(internalInstance, stack) {
  if (internalInstance._currentElement) {
    pushState(stack, internalInstance._currentElement, internalInstance._instance);
  }

  if (internalInstance._renderedComponent) {
    const childStack = {};
    traverseRenderedChildren(internalInstance._renderedComponent, childStack);
    stack.children.push(childStack);
  } else if (internalInstance._renderedChildren) {
    Object.keys(internalInstance._renderedChildren).forEach(key => {
      const childStack = {};
      traverseRenderedChildren(internalInstance._renderedChildren[key], childStack);
      stack.children.push(childStack);
    });
  }
}

function hydrateStack(instance) {
  const internalInstance = instance._reactInternalInstance;
  const stack = {};
  traverseRenderedChildren(internalInstance, stack);
  return stack;
}

function traverseTree(root, stack) {
  pushState(stack, root);
  const node = root;
  if (node.child) {
    let child = node.child;

    do {
      const childStack = {};
      traverseTree(child, childStack);
      stack.children.push(childStack);
      child = child.sibling;
    } while (child);
  }
}

// modern react tree
function hydrateTree(root) {
  const stack = {};
  traverseTree(root, stack);
  return stack;
}

function getReactStack(instance) {
  const root = (0, _reactUtils.getReactInstance)(instance);
  if (typeof root.tag !== 'number') {
    // Traverse stack-based React tree.
    return hydrateStack(instance);
  }
  return hydrateTree(root);
}

exports.default = getReactStack;