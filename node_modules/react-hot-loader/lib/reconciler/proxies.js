'use strict';

exports.__esModule = true;
exports.resetProxies = exports.createProxyForType = exports.updateProxyById = exports.getProxyByType = exports.getIdByType = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _reactStandIn = require('react-stand-in');

var _reactStandIn2 = _interopRequireDefault(_reactStandIn);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let proxiesByID;
let idsByType;

let elementCount = 0;

(0, _reactStandIn.setConfig)({ logger: _logger2.default });

const generateTypeId = () => `auto-${elementCount++}`;

const getIdByType = exports.getIdByType = type => idsByType.get(type);

const getProxyByType = exports.getProxyByType = type => proxiesByID[getIdByType(type)];

const autoWrapper = element => {
  // post wrap on post render
  if (!element) {
    return element;
  }
  if (Array.isArray(element)) {
    return element.map(autoWrapper);
  }
  if (typeof element.type === 'function') {
    const proxy = getProxyByType(element.type);
    if (proxy) {
      return _extends({}, element, {
        type: proxy.get()
      });
    }
  }
  return element;
};

const updateProxyById = exports.updateProxyById = (id, type) => {
  // Remember the ID.
  idsByType.set(type, id);

  if (!proxiesByID[id]) {
    proxiesByID[id] = (0, _reactStandIn2.default)(type, id, autoWrapper);
  } else {
    proxiesByID[id].update(type);
  }
  return proxiesByID[id];
};

const createProxyForType = exports.createProxyForType = type => getProxyByType(type) || updateProxyById(generateTypeId(), type);

const resetProxies = exports.resetProxies = () => {
  proxiesByID = {};
  idsByType = new WeakMap();
};